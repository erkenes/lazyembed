{"version":3,"sources":["lazyembed.js"],"names":["LazyEmbed","DEFAULTS","elements","overlayText","adoptResponsiveEmbed","excludeElements","classes","root","overlay","text","placeholder","embed","onClick","onLoad","onInit","EMBED_RESPONSIVE_PATTERN","EMBED_RESPONSIVE_ITEM_PATTERN","options","setOptions","init","key","defaults","hasOwnProperty","embeds","document","querySelectorAll","forEach","parent","parentElement","clonedEmbed","cloneNode","className","wrapper","createElement","match","image","hasAttribute","style","backgroundImage","getAttribute","overlayBackground","background","addEventListener","display","setAttribute","overlayColor","color","innerHTML","appendChild","overlayExcludes","overlayExclude","e","stopPropagation","parentNode","replaceChild"],"mappings":"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","file":"lazyembed.js","sourcesContent":["const LazyEmbed = (() => {\n    const DEFAULTS = {\n        elements: '[data-lazyembed]',\n        overlayText: 'Click to load',\n        // !!! DEPRECATED !!! overlayBackground: 'rgba(0, 0, 0, .6)',\n        // !!! DEPRECATED !!! overlayColor: '#fff',\n        adoptResponsiveEmbed: true,\n        excludeElements: 'a',\n        classes: {\n            root: 'lazyembed',\n            overlay: 'lazyembed__overlay',\n            text: 'lazyembed__text',\n            placeholder: 'lazyembed__placeholder',\n            embed: 'lazyembed__embed',\n        },\n        onClick: () => {\n        },\n        onLoad: () => {\n        },\n        onInit: () => {\n        },\n    };\n    const EMBED_RESPONSIVE_PATTERN = /(?:\\s|^)embed-responsive(?:\\s|$)/;\n    const EMBED_RESPONSIVE_ITEM_PATTERN = /(?:\\s|^)embed-responsive-item(?:\\s|$)/;\n\n    class LazyEmbed\n    {\n        static get defaults()\n        {\n            return DEFAULTS;\n        }\n\n        constructor(options = {})\n        {\n            this.setOptions(options);\n            this.init();\n        }\n\n        setOptions(options)\n        {\n            this.options = options;\n            for (let key in LazyEmbed.defaults) {\n                if (LazyEmbed.defaults.hasOwnProperty(key) && typeof this.options[key] === 'undefined') {\n                    this.options[key] = LazyEmbed.defaults[key];\n                }\n            }\n        }\n\n        init()\n        {\n            let embeds;\n            if (typeof this.options.elements === 'string') {\n                embeds = document.querySelectorAll(this.options.elements);\n            } else {\n                embeds = this.options.elements;\n            }\n\n            embeds.forEach(embed => {\n                const parent = embed.parentElement;\n\n                const clonedEmbed = embed.cloneNode(true);\n                clonedEmbed.className += this.options.classes.embed;\n\n                const wrapper = document.createElement('div');\n                wrapper.className = this.options.classes.root;\n                if (this.options.adoptResponsiveEmbed && (parent.className.match(\n                    EMBED_RESPONSIVE_PATTERN) !== null || clonedEmbed.className.match(\n                    EMBED_RESPONSIVE_ITEM_PATTERN) !== null)) {\n                    wrapper.className += ' embed-responsive-item';\n                }\n\n                let image;\n                if (clonedEmbed.hasAttribute('data-placeholder')) {\n                    image = document.createElement('div');\n                    image.className = this.options.classes.placeholder;\n                    image.style.backgroundImage = 'url(' + clonedEmbed.getAttribute('data-placeholder') + ')';\n                }\n\n                const overlay = document.createElement('div');\n                overlay.className = this.options.classes.overlay;\n                if (typeof this.options.overlayBackground !== 'undefined') {\n                    overlay.style.background = this.options.overlayBackground;\n                }\n                overlay.addEventListener('click', () => {\n                    overlay.style.display = 'none';\n                    if (image) {\n                        image.style.display = 'none';\n                    }\n\n                    if (clonedEmbed.hasAttribute('data-src')) {\n                        clonedEmbed.addEventListener('load', () => {\n                            this.options.onLoad(clonedEmbed);\n                        }, false);\n                        clonedEmbed.setAttribute('src', clonedEmbed.getAttribute('data-src'));\n                    }\n\n                    this.options.onClick(clonedEmbed);\n                }, false);\n\n                const overlayText = document.createElement('div');\n                overlayText.className = this.options.classes.text;\n                if (typeof this.options.overlayColor !== 'undefined') {\n                    overlayText.style.color = this.options.overlayColor;\n                }\n                overlayText.innerHTML = this.options.overlayText;\n\n                overlay.appendChild(overlayText);\n\n                const overlayExcludes = overlay.querySelectorAll(this.options.excludeElements);\n                overlayExcludes.forEach(overlayExclude => {\n                    overlayExclude.addEventListener('click', function(e) {\n                        e.stopPropagation();\n                    }, false);\n                });\n\n                wrapper.appendChild(clonedEmbed);\n                if (image) {\n                    wrapper.appendChild(image);\n                }\n                wrapper.appendChild(overlay);\n\n                embed.parentNode.replaceChild(wrapper, embed);\n\n                this.options.onInit(wrapper);\n            });\n        }\n    }\n\n    return LazyEmbed;\n})();\n\nexport default LazyEmbed;\n"]}