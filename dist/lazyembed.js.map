{"version":3,"sources":["lazyembed.js"],"names":["LazyEmbed","DEFAULTS","elements","overlayText","overlayBackground","overlayColor","adoptResponsiveEmbed","excludeElements","classes","root","overlay","text","placeholder","embed","onClick","onLoad","onInit","EMBED_RESPONSIVE_PATTERN","EMBED_RESPONSIVE_ITEM_PATTERN","options","setOptions","init","key","defaults","hasOwnProperty","console","log","embeds","document","querySelectorAll","forEach","parent","parentElement","clonedEmbed","cloneNode","className","wrapper","createElement","match","image","hasAttribute","style","backgroundImage","getAttribute","backgroundColor","addEventListener","display","setAttribute","color","innerHTML","appendChild","overlayExcludes","overlayExclude","e","stopPropagation","parentNode","replaceChild"],"mappings":"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","file":"lazyembed.js","sourcesContent":["const LazyEmbed = (() => {\n    const DEFAULTS = {\n        elements: '[data-lazyembed]',\n        overlayText: 'Click to load',\n        overlayBackground: 'rgba(0, 0, 0, .6)',\n        overlayColor: '#fff',\n        adoptResponsiveEmbed: true,\n        excludeElements: 'a',\n        classes: {\n            root: 'lazyembed',\n            overlay: 'lazyembed__overlay',\n            text: 'lazyembed__text',\n            placeholder: 'lazyembed__placeholder',\n            embed: 'lazyembed__embed',\n        },\n        onClick: function onClick() {\n        },\n        onLoad: function onLoad() {\n        },\n        onInit: function onInit() {\n        },\n    };\n    const EMBED_RESPONSIVE_PATTERN = /(?:\\s|^)embed-responsive(?:\\s|$)/;\n    const EMBED_RESPONSIVE_ITEM_PATTERN = /(?:\\s|^)embed-responsive-item(?:\\s|$)/;\n\n    class LazyEmbed\n    {\n        static get defaults()\n        {\n            return DEFAULTS;\n        }\n\n        constructor(options = {})\n        {\n            this.setOptions(options);\n            this.init();\n        }\n\n        setOptions(options)\n        {\n            this.options = options;\n            for (let key in LazyEmbed.defaults) {\n                if (LazyEmbed.defaults.hasOwnProperty(key) && typeof this.options[key] === 'undefined') {\n                    this.options[key] = LazyEmbed.defaults[key];\n                }\n            }\n\n            console.log(options, this.options, LazyEmbed.defaults);\n        }\n\n        init()\n        {\n            let embeds;\n            if (typeof this.options.elements === 'string') {\n                embeds = document.querySelectorAll(this.options.elements);\n            } else {\n                embeds = this.options.elements;\n            }\n\n            console.log(embeds, this.options.elements);\n\n            embeds.forEach(embed => {\n                const parent = embed.parentElement;\n\n                const clonedEmbed = embed.cloneNode(true);\n                clonedEmbed.className += this.options.classes.embed;\n\n                const wrapper = document.createElement('div');\n                wrapper.className = this.options.classes.root;\n                if (this.options.adoptResponsiveEmbed && (parent.className.match(\n                    EMBED_RESPONSIVE_PATTERN) !== null || clonedEmbed.className.match(\n                    EMBED_RESPONSIVE_ITEM_PATTERN) !== null)) {\n                    wrapper.className += ' embed-responsive-item';\n                }\n\n                let image;\n                if (clonedEmbed.hasAttribute('data-placeholder')) {\n                    image = document.createElement('div');\n                    image.className = this.options.classes.placeholder;\n                    image.style.backgroundImage = 'url(' + clonedEmbed.getAttribute('data-placeholder') + ')';\n                }\n\n                const overlay = document.createElement('div');\n                overlay.className = this.options.classes.overlay;\n                overlay.style.backgroundColor = this.options.overlayBackground;\n                overlay.addEventListener('click', () => {\n                    overlay.style.display = 'none';\n                    if (image) {\n                        image.style.display = 'none';\n                    }\n\n                    if (clonedEmbed.hasAttribute('data-src')) {\n                        clonedEmbed.addEventListener('load', () => {\n                            this.options.onLoad(clonedEmbed);\n                        }, false);\n                        clonedEmbed.setAttribute('src', clonedEmbed.getAttribute('data-src'));\n                    }\n\n                    this.options.onClick(clonedEmbed);\n                }, false);\n\n                const overlayText = document.createElement('div');\n                overlayText.className = this.options.classes.text;\n                overlayText.style.color = this.options.overlayColor;\n                overlayText.innerHTML = this.options.overlayText;\n\n                overlay.appendChild(overlayText);\n\n                const overlayExcludes = overlay.querySelectorAll(this.options.excludeElements);\n                overlayExcludes.forEach(overlayExclude => {\n                    overlayExclude.addEventListener('click', function(e) {\n                        e.stopPropagation();\n                    }, false);\n                });\n\n                wrapper.appendChild(clonedEmbed);\n                if (image) {\n                    wrapper.appendChild(image);\n                }\n                wrapper.appendChild(overlay);\n\n                embed.parentNode.replaceChild(wrapper, embed);\n\n                this.options.onInit(wrapper);\n            });\n        }\n    }\n\n    return LazyEmbed;\n})();\n\nexport default LazyEmbed;\n"]}