{"version":3,"sources":["lazyembed.js"],"names":["LazyEmbed","DEFAULTS","elements","overlayText","adoptResponsiveEmbed","excludeElements","classes","root","overlay","text","placeholder","embed","onClick","onLoad","onInit","EMBED_RESPONSIVE_PATTERN","EMBED_RESPONSIVE_ITEM_PATTERN","options","arguments","length","undefined","_classCallCheck","this","setOptions","init","_createClass","key","get","value","defaults","hasOwnProperty","_this","document","querySelectorAll","forEach","parent","parentElement","clonedEmbed","cloneNode","className","wrapper","createElement","match","image","hasAttribute","style","backgroundImage","getAttribute","overlayBackground","background","addEventListener","display","setAttribute","overlayColor","color","innerHTML","appendChild","overlayExclude","e","stopPropagation","parentNode","replaceChild"],"mappings":"gXAAA,IAAMA,UAAa,WACf,IAAMC,EAAW,CACbC,SAAU,mBACVC,YAAa,gBAGbC,sBAAsB,EACtBC,gBAAiB,IACjBC,QAAS,CACLC,KAAM,YACNC,QAAS,qBACTC,KAAM,kBACNC,YAAa,yBACbC,MAAO,oBAEXC,QAAS,aAETC,OAAQ,aAERC,OAAQ,cAGNC,EAA2B,mCAC3BC,EAAgC,wCAyGtC,OAhIqB,WAgCjB,SAAAhB,IACA,IADYiB,EACZ,EAAAC,UAAAC,aAAAC,IAAAF,UAAA,GAAAA,UAAA,GADsB,GACtBG,gBAAAC,KAAAtB,GACIsB,KAAKC,WAAWN,GAChBK,KAAKE,OAnCQ,OAAAC,aAAAzB,EAAA,KAAA,CAAA,CAAA0B,IAAA,WAAAC,IAAA,WA6Bb,OAAO1B,MA7BMwB,aAAAzB,EAAA,CAAA,CAAA0B,IAAA,aAAAE,MAAA,SAsCNX,GAGP,IAAK,IAAIS,KADTJ,KAAKL,QAAUA,EACCjB,EAAU6B,SAClB7B,EAAU6B,SAASC,eAAeJ,SAAqC,IAAtBJ,KAAKL,QAAQS,KAC9DJ,KAAKL,QAAQS,GAAO1B,EAAU6B,SAASH,MA3ClC,CAAAA,IAAA,OAAAE,MAAA,WAiDjB,IAAAG,EAAAT,MAEyC,iBAA1BA,KAAKL,QAAQf,SACX8B,SAASC,iBAAiBX,KAAKL,QAAQf,UAEvCoB,KAAKL,QAAQf,UAGnBgC,QAAQ,SAAAvB,GACX,IAAMwB,EAASxB,EAAMyB,cAEfC,EAAc1B,EAAM2B,WAAU,GACpCD,EAAYE,WAAaR,EAAKd,QAAQX,QAAQK,MAE9C,IAAM6B,EAAUR,SAASS,cAAc,OACvCD,EAAQD,UAAYR,EAAKd,QAAQX,QAAQC,MACrCwB,EAAKd,QAAQb,sBACiB,OADQ+B,EAAOI,UAAUG,MACvD3B,IACmC,OADGsB,EAAYE,UAAUG,MAC5D1B,KACAwB,EAAQD,WAAa,0BAGzB,IAAII,OAAAA,EACAN,EAAYO,aAAa,uBACzBD,EAAQX,SAASS,cAAc,QACzBF,UAAYR,EAAKd,QAAQX,QAAQI,YACvCiC,EAAME,MAAMC,gBAAkB,OAAST,EAAYU,aAAa,oBAAsB,KAG1F,IAAMvC,EAAUwB,SAASS,cAAc,OACvCjC,EAAQ+B,UAAYR,EAAKd,QAAQX,QAAQE,aACK,IAAnCuB,EAAKd,QAAQ+B,oBACpBxC,EAAQqC,MAAMI,WAAalB,EAAKd,QAAQ+B,mBAE5CxC,EAAQ0C,iBAAiB,QAAS,WAC9B1C,EAAQqC,MAAMM,QAAU,OACpBR,IACAA,EAAME,MAAMM,QAAU,QAGtBd,EAAYO,aAAa,cACzBP,EAAYa,iBAAiB,OAAQ,WACjCnB,EAAKd,QAAQJ,OAAOwB,KACrB,GACHA,EAAYe,aAAa,MAAOf,EAAYU,aAAa,cAG7DhB,EAAKd,QAAQL,QAAQyB,KACtB,GAEH,IAAMlC,EAAc6B,SAASS,cAAc,OAC3CtC,EAAYoC,UAAYR,EAAKd,QAAQX,QAAQG,UACJ,IAA9BsB,EAAKd,QAAQoC,eACpBlD,EAAY0C,MAAMS,MAAQvB,EAAKd,QAAQoC,cAE3ClD,EAAYoD,UAAYxB,EAAKd,QAAQd,YAErCK,EAAQgD,YAAYrD,GAEIK,EAAQyB,iBAAiBF,EAAKd,QAAQZ,iBAC9C6B,QAAQ,SAAAuB,GACpBA,EAAeP,iBAAiB,QAAS,SAASQ,GAC9CA,EAAEC,oBACH,KAGPnB,EAAQgB,YAAYnB,GAChBM,GACAH,EAAQgB,YAAYb,GAExBH,EAAQgB,YAAYhD,GAEpBG,EAAMiD,WAAWC,aAAarB,EAAS7B,GAEvCoB,EAAKd,QAAQH,OAAO0B,SA3HXxC,EAAA,GAAN","file":"lazyembed.min.js","sourcesContent":["const LazyEmbed = (() => {\n    const DEFAULTS = {\n        elements: '[data-lazyembed]',\n        overlayText: 'Click to load',\n        // !!! DEPRECATED !!! overlayBackground: 'rgba(0, 0, 0, .6)',\n        // !!! DEPRECATED !!! overlayColor: '#fff',\n        adoptResponsiveEmbed: true,\n        excludeElements: 'a',\n        classes: {\n            root: 'lazyembed',\n            overlay: 'lazyembed__overlay',\n            text: 'lazyembed__text',\n            placeholder: 'lazyembed__placeholder',\n            embed: 'lazyembed__embed',\n        },\n        onClick: () => {\n        },\n        onLoad: () => {\n        },\n        onInit: () => {\n        },\n    };\n    const EMBED_RESPONSIVE_PATTERN = /(?:\\s|^)embed-responsive(?:\\s|$)/;\n    const EMBED_RESPONSIVE_ITEM_PATTERN = /(?:\\s|^)embed-responsive-item(?:\\s|$)/;\n\n    class LazyEmbed\n    {\n        static get defaults()\n        {\n            return DEFAULTS;\n        }\n\n        constructor(options = {})\n        {\n            this.setOptions(options);\n            this.init();\n        }\n\n        setOptions(options)\n        {\n            this.options = options;\n            for (let key in LazyEmbed.defaults) {\n                if (LazyEmbed.defaults.hasOwnProperty(key) && typeof this.options[key] === 'undefined') {\n                    this.options[key] = LazyEmbed.defaults[key];\n                }\n            }\n        }\n\n        init()\n        {\n            let embeds;\n            if (typeof this.options.elements === 'string') {\n                embeds = document.querySelectorAll(this.options.elements);\n            } else {\n                embeds = this.options.elements;\n            }\n\n            embeds.forEach(embed => {\n                const parent = embed.parentElement;\n\n                const clonedEmbed = embed.cloneNode(true);\n                clonedEmbed.className += this.options.classes.embed;\n\n                const wrapper = document.createElement('div');\n                wrapper.className = this.options.classes.root;\n                if (this.options.adoptResponsiveEmbed && (parent.className.match(\n                    EMBED_RESPONSIVE_PATTERN) !== null || clonedEmbed.className.match(\n                    EMBED_RESPONSIVE_ITEM_PATTERN) !== null)) {\n                    wrapper.className += ' embed-responsive-item';\n                }\n\n                let image;\n                if (clonedEmbed.hasAttribute('data-placeholder')) {\n                    image = document.createElement('div');\n                    image.className = this.options.classes.placeholder;\n                    image.style.backgroundImage = 'url(' + clonedEmbed.getAttribute('data-placeholder') + ')';\n                }\n\n                const overlay = document.createElement('div');\n                overlay.className = this.options.classes.overlay;\n                if (typeof this.options.overlayBackground !== 'undefined') {\n                    overlay.style.background = this.options.overlayBackground;\n                }\n                overlay.addEventListener('click', () => {\n                    overlay.style.display = 'none';\n                    if (image) {\n                        image.style.display = 'none';\n                    }\n\n                    if (clonedEmbed.hasAttribute('data-src')) {\n                        clonedEmbed.addEventListener('load', () => {\n                            this.options.onLoad(clonedEmbed);\n                        }, false);\n                        clonedEmbed.setAttribute('src', clonedEmbed.getAttribute('data-src'));\n                    }\n\n                    this.options.onClick(clonedEmbed);\n                }, false);\n\n                const overlayText = document.createElement('div');\n                overlayText.className = this.options.classes.text;\n                if (typeof this.options.overlayColor !== 'undefined') {\n                    overlayText.style.color = this.options.overlayColor;\n                }\n                overlayText.innerHTML = this.options.overlayText;\n\n                overlay.appendChild(overlayText);\n\n                const overlayExcludes = overlay.querySelectorAll(this.options.excludeElements);\n                overlayExcludes.forEach(overlayExclude => {\n                    overlayExclude.addEventListener('click', function(e) {\n                        e.stopPropagation();\n                    }, false);\n                });\n\n                wrapper.appendChild(clonedEmbed);\n                if (image) {\n                    wrapper.appendChild(image);\n                }\n                wrapper.appendChild(overlay);\n\n                embed.parentNode.replaceChild(wrapper, embed);\n\n                this.options.onInit(wrapper);\n            });\n        }\n    }\n\n    return LazyEmbed;\n})();\n\nexport default LazyEmbed;\n"]}