{"version":3,"sources":["lazyembed.js"],"names":["LazyEmbed","DEFAULTS","elements","overlayText","adoptResponsiveEmbed","excludeElements","classes","root","overlay","text","placeholder","embed","onClick","onLoad","onInit","EMBED_RESPONSIVE_PATTERN","EMBED_RESPONSIVE_ITEM_PATTERN","extend","target","source","key","hasOwnProperty","Object","prototype","toString","call","options","arguments","length","undefined","_classCallCheck","this","setOptions","init","_createClass","get","value","defaults","_this","document","querySelectorAll","forEach","parent","parentElement","clonedEmbed","cloneNode","className","wrapper","createElement","match","image","hasAttribute","style","backgroundImage","getAttribute","overlayBackground","background","addEventListener","display","setAttribute","overlayColor","color","innerHTML","appendChild","overlayExclude","e","stopPropagation","parentNode","replaceChild"],"mappings":"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","file":"lazyembed.min.js","sourcesContent":["const LazyEmbed = (() => {\n    const DEFAULTS = {\n        elements: '[data-lazyembed]',\n        overlayText: 'Click to load',\n        // !!! DEPRECATED !!! overlayBackground: 'rgba(0, 0, 0, .6)',\n        // !!! DEPRECATED !!! overlayColor: '#fff',\n        adoptResponsiveEmbed: true,\n        excludeElements: 'a',\n        classes: {\n            root: 'lazyembed',\n            overlay: 'lazyembed__overlay',\n            text: 'lazyembed__text',\n            placeholder: 'lazyembed__placeholder',\n            embed: 'lazyembed__embed',\n        },\n        onClick: () => {\n        },\n        onLoad: () => {\n        },\n        onInit: () => {\n        },\n    };\n    const EMBED_RESPONSIVE_PATTERN = /(?:\\s|^)embed-responsive(?:\\s|$)/;\n    const EMBED_RESPONSIVE_ITEM_PATTERN = /(?:\\s|^)embed-responsive-item(?:\\s|$)/;\n\n    const extend = (target, source) => {\n        for (let key in source) {\n            if (source.hasOwnProperty(key)) {\n                if (Object.prototype.toString.call(source[key]) === '[object Object]') {\n                    if (Object.prototype.toString.call(target[key]) !== '[object Object]') {\n                        target[key] = {};\n                    }\n\n                    extend(target[key], source[key]);\n                } else {\n                    target[key] = source[key];\n                }\n            }\n        }\n\n        return target;\n    };\n\n    class LazyEmbed\n    {\n        static get defaults()\n        {\n            return DEFAULTS;\n        }\n\n        constructor(options = {})\n        {\n            this.setOptions(options);\n            this.init();\n        }\n\n        setOptions(options)\n        {\n            this.options = {};\n            extend(this.options, LazyEmbed.defaults);\n            extend(this.options, options);\n        }\n\n        init()\n        {\n            let embeds;\n            if (typeof this.options.elements === 'string') {\n                embeds = document.querySelectorAll(this.options.elements);\n            } else {\n                embeds = this.options.elements;\n            }\n\n            embeds.forEach(embed => {\n                const parent = embed.parentElement;\n\n                const clonedEmbed = embed.cloneNode(true);\n                clonedEmbed.className += this.options.classes.embed;\n\n                const wrapper = document.createElement('div');\n                wrapper.className = this.options.classes.root;\n                if (this.options.adoptResponsiveEmbed && (parent.className.match(\n                    EMBED_RESPONSIVE_PATTERN) !== null || clonedEmbed.className.match(\n                    EMBED_RESPONSIVE_ITEM_PATTERN) !== null)) {\n                    wrapper.className += ' embed-responsive-item';\n                }\n\n                let image;\n                if (clonedEmbed.hasAttribute('data-placeholder')) {\n                    image = document.createElement('div');\n                    image.className = this.options.classes.placeholder;\n                    image.style.backgroundImage = 'url(' + clonedEmbed.getAttribute('data-placeholder') + ')';\n                }\n\n                const overlay = document.createElement('div');\n                overlay.className = this.options.classes.overlay;\n                if (typeof this.options.overlayBackground !== 'undefined') {\n                    overlay.style.background = this.options.overlayBackground;\n                }\n                overlay.addEventListener('click', () => {\n                    overlay.style.display = 'none';\n                    if (image) {\n                        image.style.display = 'none';\n                    }\n\n                    if (clonedEmbed.hasAttribute('data-src')) {\n                        clonedEmbed.addEventListener('load', () => {\n                            this.options.onLoad(clonedEmbed);\n                        }, false);\n                        clonedEmbed.setAttribute('src', clonedEmbed.getAttribute('data-src'));\n                    }\n\n                    this.options.onClick(clonedEmbed);\n                }, false);\n\n                const overlayText = document.createElement('div');\n                overlayText.className = this.options.classes.text;\n                if (typeof this.options.overlayColor !== 'undefined') {\n                    overlayText.style.color = this.options.overlayColor;\n                }\n                overlayText.innerHTML = this.options.overlayText;\n\n                overlay.appendChild(overlayText);\n\n                const overlayExcludes = overlay.querySelectorAll(this.options.excludeElements);\n                overlayExcludes.forEach(overlayExclude => {\n                    overlayExclude.addEventListener('click', function(e) {\n                        e.stopPropagation();\n                    }, false);\n                });\n\n                wrapper.appendChild(clonedEmbed);\n                if (image) {\n                    wrapper.appendChild(image);\n                }\n                wrapper.appendChild(overlay);\n\n                embed.parentNode.replaceChild(wrapper, embed);\n\n                this.options.onInit(wrapper);\n            });\n        }\n    }\n\n    return LazyEmbed;\n})();\n\nexport default LazyEmbed;\n"]}