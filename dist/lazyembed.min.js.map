{"version":3,"sources":["lazyembed.js"],"names":["LazyEmbed","DEFAULTS","elements","overlayText","overlayBackground","overlayColor","adoptResponsiveEmbed","excludeElements","classes","root","overlay","text","placeholder","embed","onClick","onLoad","onInit","EMBED_RESPONSIVE_PATTERN","EMBED_RESPONSIVE_ITEM_PATTERN","options","arguments","length","undefined","_classCallCheck","this","setOptions","init","_createClass","key","get","value","defaults","hasOwnProperty","console","log","_this","embeds","document","querySelectorAll","forEach","parent","parentElement","clonedEmbed","cloneNode","className","wrapper","createElement","match","image","hasAttribute","style","backgroundImage","getAttribute","backgroundColor","addEventListener","display","setAttribute","color","innerHTML","appendChild","overlayExclude","e","stopPropagation","parentNode","replaceChild"],"mappings":"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","file":"lazyembed.min.js","sourcesContent":["const LazyEmbed = (() => {\n    const DEFAULTS = {\n        elements: '[data-lazyembed]',\n        overlayText: 'Click to load',\n        overlayBackground: 'rgba(0, 0, 0, .6)',\n        overlayColor: '#fff',\n        adoptResponsiveEmbed: true,\n        excludeElements: 'a',\n        classes: {\n            root: 'lazyembed',\n            overlay: 'lazyembed__overlay',\n            text: 'lazyembed__text',\n            placeholder: 'lazyembed__placeholder',\n            embed: 'lazyembed__embed',\n        },\n        onClick: function onClick() {\n        },\n        onLoad: function onLoad() {\n        },\n        onInit: function onInit() {\n        },\n    };\n    const EMBED_RESPONSIVE_PATTERN = /(?:\\s|^)embed-responsive(?:\\s|$)/;\n    const EMBED_RESPONSIVE_ITEM_PATTERN = /(?:\\s|^)embed-responsive-item(?:\\s|$)/;\n\n    class LazyEmbed\n    {\n        static get defaults()\n        {\n            return DEFAULTS;\n        }\n\n        constructor(options = {})\n        {\n            this.setOptions(options);\n            this.init();\n        }\n\n        setOptions(options)\n        {\n            this.options = options;\n            for (let key in LazyEmbed.defaults) {\n                if (LazyEmbed.defaults.hasOwnProperty(key) && typeof this.options[key] === 'undefined') {\n                    this.options[key] = LazyEmbed.defaults[key];\n                }\n            }\n\n            console.log(options, this.options, LazyEmbed.defaults);\n        }\n\n        init()\n        {\n            let embeds;\n            if (typeof this.options.elements === 'string') {\n                embeds = document.querySelectorAll(this.options.elements);\n            } else {\n                embeds = this.options.elements;\n            }\n\n            console.log(embeds, this.options.elements);\n\n            embeds.forEach(embed => {\n                const parent = embed.parentElement;\n\n                const clonedEmbed = embed.cloneNode(true);\n                clonedEmbed.className += this.options.classes.embed;\n\n                const wrapper = document.createElement('div');\n                wrapper.className = this.options.classes.root;\n                if (this.options.adoptResponsiveEmbed && (parent.className.match(\n                    EMBED_RESPONSIVE_PATTERN) !== null || clonedEmbed.className.match(\n                    EMBED_RESPONSIVE_ITEM_PATTERN) !== null)) {\n                    wrapper.className += ' embed-responsive-item';\n                }\n\n                let image;\n                if (clonedEmbed.hasAttribute('data-placeholder')) {\n                    image = document.createElement('div');\n                    image.className = this.options.classes.placeholder;\n                    image.style.backgroundImage = 'url(' + clonedEmbed.getAttribute('data-placeholder') + ')';\n                }\n\n                const overlay = document.createElement('div');\n                overlay.className = this.options.classes.overlay;\n                overlay.style.backgroundColor = this.options.overlayBackground;\n                overlay.addEventListener('click', () => {\n                    overlay.style.display = 'none';\n                    if (image) {\n                        image.style.display = 'none';\n                    }\n\n                    if (clonedEmbed.hasAttribute('data-src')) {\n                        clonedEmbed.addEventListener('load', () => {\n                            this.options.onLoad(clonedEmbed);\n                        }, false);\n                        clonedEmbed.setAttribute('src', clonedEmbed.getAttribute('data-src'));\n                    }\n\n                    this.options.onClick(clonedEmbed);\n                }, false);\n\n                const overlayText = document.createElement('div');\n                overlayText.className = this.options.classes.text;\n                overlayText.style.color = this.options.overlayColor;\n                overlayText.innerHTML = this.options.overlayText;\n\n                overlay.appendChild(overlayText);\n\n                const overlayExcludes = overlay.querySelectorAll(this.options.excludeElements);\n                overlayExcludes.forEach(overlayExclude => {\n                    overlayExclude.addEventListener('click', function(e) {\n                        e.stopPropagation();\n                    }, false);\n                });\n\n                wrapper.appendChild(clonedEmbed);\n                if (image) {\n                    wrapper.appendChild(image);\n                }\n                wrapper.appendChild(overlay);\n\n                embed.parentNode.replaceChild(wrapper, embed);\n\n                this.options.onInit(wrapper);\n            });\n        }\n    }\n\n    return LazyEmbed;\n})();\n\nexport default LazyEmbed;\n"]}