{"version":3,"sources":["lazyembed.js"],"names":["LazyEmbed","DEFAULTS","elements","overlayText","adoptResponsiveEmbed","excludeElements","includeElements","classes","root","overlay","text","placeholder","embed","onClick","onLoad","onInit","EMBED_RESPONSIVE_PATTERN","EMBED_RESPONSIVE_ITEM_PATTERN","extend","target","source","key","hasOwnProperty","Object","prototype","toString","call","options","arguments","length","undefined","_classCallCheck","this","setOptions","init","_createClass","get","value","defaults","_this","embeds","document","querySelectorAll","_loop","i","parent","parentElement","clonedEmbed","cloneNode","className","wrapper","createElement","match","image","hasAttribute","style","backgroundImage","getAttribute","overlayBackground","background","addEventListener","display","once","setAttribute","overlayColor","color","innerHTML","appendChild","overlayExcludes","u","e","matches","stopPropagation","parentNode","replaceChild"],"mappings":"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","file":"lazyembed.min.js","sourcesContent":["const LazyEmbed = (() => {\r\n    const DEFAULTS = {\r\n        elements: '[data-lazyembed]',\r\n        overlayText: 'Click to load',\r\n        // !!! DEPRECATED !!! overlayBackground: 'rgba(0, 0, 0, .6)',\r\n        // !!! DEPRECATED !!! overlayColor: '#fff',\r\n        adoptResponsiveEmbed: true,\r\n        excludeElements: 'a',\r\n        includeElements: null,\r\n        classes: {\r\n            root: 'lazyembed',\r\n            overlay: 'lazyembed__overlay',\r\n            text: 'lazyembed__text',\r\n            placeholder: 'lazyembed__placeholder',\r\n            embed: 'lazyembed__embed',\r\n        },\r\n        onClick: () => {\r\n        },\r\n        onLoad: () => {\r\n        },\r\n        onInit: () => {\r\n        },\r\n    };\r\n    const EMBED_RESPONSIVE_PATTERN = /(?:\\s|^)embed-responsive(?:\\s|$)/;\r\n    const EMBED_RESPONSIVE_ITEM_PATTERN = /(?:\\s|^)embed-responsive-item(?:\\s|$)/;\r\n\r\n    const extend = (target, source) => {\r\n        for (let key in source) {\r\n            if (source.hasOwnProperty(key)) {\r\n                if (Object.prototype.toString.call(source[key]) === '[object Object]') {\r\n                    if (Object.prototype.toString.call(target[key]) !== '[object Object]') {\r\n                        target[key] = {};\r\n                    }\r\n\r\n                    extend(target[key], source[key]);\r\n                } else {\r\n                    target[key] = source[key];\r\n                }\r\n            }\r\n        }\r\n\r\n        return target;\r\n    };\r\n\r\n    class LazyEmbed\r\n    {\r\n        static get defaults()\r\n        {\r\n            return DEFAULTS;\r\n        }\r\n\r\n        constructor(options = {})\r\n        {\r\n            this.setOptions(options);\r\n            this.init();\r\n        }\r\n\r\n        setOptions(options)\r\n        {\r\n            this.options = {};\r\n            extend(this.options, LazyEmbed.defaults);\r\n            extend(this.options, options);\r\n        }\r\n\r\n        init()\r\n        {\r\n            let embeds;\r\n            if (typeof this.options.elements === 'string') {\r\n                embeds = document.querySelectorAll(this.options.elements);\r\n            } else {\r\n                embeds = this.options.elements;\r\n            }\r\n\r\n            for (let i = 0; i < embeds.length; i++) {\r\n                const embed = embeds[i];\r\n                const parent = embed.parentElement;\r\n\r\n                const clonedEmbed = embed.cloneNode(true);\r\n                clonedEmbed.className += ' ' + this.options.classes.embed;\r\n\r\n                const wrapper = document.createElement('div');\r\n                wrapper.className = this.options.classes.root;\r\n                if (this.options.adoptResponsiveEmbed && (parent.className.match(\r\n                    EMBED_RESPONSIVE_PATTERN) !== null || clonedEmbed.className.match(\r\n                    EMBED_RESPONSIVE_ITEM_PATTERN) !== null)) {\r\n                    wrapper.className += ' embed-responsive-item';\r\n                }\r\n\r\n                let image;\r\n                if (clonedEmbed.hasAttribute('data-placeholder')) {\r\n                    image = document.createElement('div');\r\n                    image.className = this.options.classes.placeholder;\r\n                    image.style.backgroundImage = 'url(' + clonedEmbed.getAttribute('data-placeholder') + ')';\r\n                }\r\n\r\n                const overlay = document.createElement('div');\r\n                overlay.className = this.options.classes.overlay;\r\n                if (typeof this.options.overlayBackground !== 'undefined') {\r\n                    overlay.style.background = this.options.overlayBackground;\r\n                }\r\n                overlay.addEventListener('click', () => {\r\n                    overlay.style.display = 'none';\r\n                    if (image) {\r\n                        image.style.display = 'none';\r\n                    }\r\n\r\n                    if (clonedEmbed.hasAttribute('data-src')) {\r\n                        clonedEmbed.addEventListener('load', () => {\r\n                            this.options.onLoad(clonedEmbed);\r\n                        }, {\r\n                            once: true\r\n                        }, false);\r\n                        clonedEmbed.setAttribute('src', clonedEmbed.getAttribute('data-src'));\r\n                    }\r\n\r\n                    this.options.onClick(clonedEmbed);\r\n                }, false);\r\n\r\n                const overlayText = document.createElement('div');\r\n                overlayText.className = this.options.classes.text;\r\n                if (typeof this.options.overlayColor !== 'undefined') {\r\n                    overlayText.style.color = this.options.overlayColor;\r\n                }\r\n                overlayText.innerHTML = this.options.overlayText;\r\n\r\n                overlay.appendChild(overlayText);\r\n\r\n                const overlayExcludes = overlay.querySelectorAll(this.options.excludeElements);\r\n                for (let u = 0; u < overlayExcludes.length; u++) {\r\n                    overlayExcludes[u].addEventListener('click', e => {\r\n                        if (this.options.includeElements) {\r\n                            if (e.target.matches(this.options.includeElements)) {\r\n                                return ;\r\n                            }\r\n                        }\r\n\r\n                        e.stopPropagation();\r\n                    }, false);\r\n                }\r\n\r\n                wrapper.appendChild(clonedEmbed);\r\n                if (image) {\r\n                    wrapper.appendChild(image);\r\n                }\r\n                wrapper.appendChild(overlay);\r\n\r\n                embed.parentNode.replaceChild(wrapper, embed);\r\n\r\n                this.options.onInit(wrapper);\r\n            }\r\n        }\r\n    }\r\n\r\n    return LazyEmbed;\r\n})();\r\n\r\nexport default LazyEmbed;\r\n"]}