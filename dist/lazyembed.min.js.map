{"version":3,"sources":["lazyembed.js"],"names":["LazyEmbed","options","this","setOptions","init","prototype","defaults","elements","overlayText","overlayBackground","overlayColor","adoptResponsiveEmbed","excludeElements","classes","root","overlay","text","placeholder","embed","onClick","onLoad","onInit","key","embeds","document","querySelectorAll","i","length","parent","parentElement","clonedEmbed","cloneNode","className","image","wrapper","createElement","match","hasAttribute","style","backgroundImage","getAttribute","backgroundColor","addEventListener","display","setAttribute","color","innerHTML","appendChild","overlayExcludes","u","e","stopPropagation","parentNode","replaceChild"],"mappings":"+OAAA,IAAMA,EAAY,SAASC,GACvBC,KAAKC,WAAWF,GAChBC,KAAKE,QAGTJ,EAAUK,UAAY,CAClBC,SAAU,CACNC,SAAU,mBACVC,YAAa,gBACbC,kBAAmB,oBACnBC,aAAc,OACdC,sBAAsB,EACtBC,gBAAiB,IACjBC,QAAS,CACLC,KAAM,YACNC,QAAS,qBACTC,KAAM,kBACNC,YAAa,yBACbC,MAAO,oBAEXC,QAAS,aAETC,OAAQ,aAERC,OAAQ,cAIZlB,WAAY,SAASF,GAEjB,IAAK,IAAIqB,KADTpB,KAAKD,QAAUA,GAAW,GACVC,KAAKI,SACZJ,KAAKD,QAAQqB,KACdpB,KAAKD,QAAQqB,GAAOpB,KAAKI,SAASgB,KAK9ClB,KAAM,WACF,IAEImB,EAFAtB,EAAUC,KAAKD,QAIfsB,EAD4B,iBAArBtB,EAAQM,SACNiB,SAASC,iBAAiBxB,EAAQM,UAElCN,EAAQM,SAGrB,IAAK,IAAImB,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,KAC/B,WACI,IAAIR,EAAQK,EAAOG,GACfE,EAASV,EAAMW,cAIfC,EAAcZ,EAAMa,WAAU,GAClCD,EAAYE,WAAa/B,EAAQY,QAAQK,MAEzC,IAQIe,EARAC,EAAUV,SAASW,cAAc,OACrCD,EAAQF,UAAY/B,EAAQY,QAAQC,MAChCb,EAAQU,sBACoB,OADKiB,EAAOI,UAAUI,MARzB,qCAUO,OADIN,EAAYE,UAAUI,MAR7B,2CAU7BF,EAAQF,WAAa,0BAIrBF,EAAYO,aAAa,uBACzBJ,EAAQT,SAASW,cAAc,QACzBH,UAAY/B,EAAQY,QAAQI,YAClCgB,EAAMK,MAAMC,gBAAkB,OAAST,EAAYU,aAAa,oBAAsB,KAG1F,IAAIzB,EAAUS,SAASW,cAAc,OACrCpB,EAAQiB,UAAY/B,EAAQY,QAAQE,QACpCA,EAAQuB,MAAMG,gBAAkBxC,EAAQQ,kBACxCM,EAAQ2B,iBAAiB,QAAS,WAC9B3B,EAAQuB,MAAMK,QAAU,OACpBV,IACAA,EAAMK,MAAMK,QAAU,QAGtBb,EAAYO,aAAa,cACzBP,EAAYY,iBAAiB,OAAQ,WACjCzC,EAAQmB,OAAOU,KAChB,GACHA,EAAYc,aAAa,MAAOd,EAAYU,aAAa,cAG7DvC,EAAQkB,QAAQW,KACjB,GAEH,IAAItB,EAAcgB,SAASW,cAAc,OACzC3B,EAAYwB,UAAY/B,EAAQY,QAAQG,KACxCR,EAAY8B,MAAMO,MAAQ5C,EAAQS,aAClCF,EAAYsC,UAAY7C,EAAQO,YAEhCO,EAAQgC,YAAYvC,GAGpB,IADA,IAAIwC,EAAkBjC,EAAQU,iBAAiBxB,EAAQW,iBAC9CqC,EAAI,EAAGA,EAAID,EAAgBrB,OAAQsB,IACxCD,EAAgBC,GAAGP,iBAAiB,QAAS,SAASQ,GAClDA,EAAEC,oBACH,GAGPjB,EAAQa,YAAYjB,GAChBG,GACAC,EAAQa,YAAYd,GAExBC,EAAQa,YAAYhC,GAEpBG,EAAMkC,WAAWC,aAAanB,EAAShB,GAEvCjB,EAAQoB,OAAOa,GAjEnB,eAuEGlC","file":"lazyembed.min.js","sourcesContent":["const LazyEmbed = function(options) {\n    this.setOptions(options);\n    this.init();\n};\n\nLazyEmbed.prototype = {\n    defaults: {\n        elements: '[data-lazyembed]',\n        overlayText: 'Click to load',\n        overlayBackground: 'rgba(0, 0, 0, .6)',\n        overlayColor: '#fff',\n        adoptResponsiveEmbed: true,\n        excludeElements: 'a',\n        classes: {\n            root: 'lazyembed',\n            overlay: 'lazyembed__overlay',\n            text: 'lazyembed__text',\n            placeholder: 'lazyembed__placeholder',\n            embed: 'lazyembed__embed'\n        },\n        onClick: function() {\n        },\n        onLoad: function() {\n        },\n        onInit: function() {\n        },\n    },\n\n    setOptions: function(options) {\n        this.options = options || {};\n        for (var key in this.defaults) {\n            if (!this.options[key]) {\n                this.options[key] = this.defaults[key];\n            }\n        }\n    },\n\n    init: function() {\n        var options = this.options;\n\n        var embeds;\n        if (typeof options.elements === 'string') {\n            embeds = document.querySelectorAll(options.elements);\n        } else {\n            embeds = options.elements;\n        }\n\n        for (var i = 0; i < embeds.length; i++) {\n            (function() {\n                var embed = embeds[i];\n                var parent = embed.parentElement;\n                var embedResponsivePattern = /(?:\\s|^)embed-responsive(?:\\s|$)/;\n                var embedResponsiveItemPattern = /(?:\\s|^)embed-responsive-item(?:\\s|$)/;\n\n                var clonedEmbed = embed.cloneNode(true);\n                clonedEmbed.className += options.classes.embed;\n\n                var wrapper = document.createElement('div');\n                wrapper.className = options.classes.root;\n                if (options.adoptResponsiveEmbed && (parent.className.match(\n                    embedResponsivePattern) !== null || clonedEmbed.className.match(\n                    embedResponsiveItemPattern) !== null)) {\n                    wrapper.className += ' embed-responsive-item';\n                }\n\n                var image;\n                if (clonedEmbed.hasAttribute('data-placeholder')) {\n                    image = document.createElement('div');\n                    image.className = options.classes.placeholder;\n                    image.style.backgroundImage = 'url(' + clonedEmbed.getAttribute('data-placeholder') + ')';\n                }\n\n                var overlay = document.createElement('div');\n                overlay.className = options.classes.overlay;\n                overlay.style.backgroundColor = options.overlayBackground;\n                overlay.addEventListener('click', function() {\n                    overlay.style.display = 'none';\n                    if (image) {\n                        image.style.display = 'none';\n                    }\n\n                    if (clonedEmbed.hasAttribute('data-src')) {\n                        clonedEmbed.addEventListener('load', function() {\n                            options.onLoad(clonedEmbed);\n                        }, false);\n                        clonedEmbed.setAttribute('src', clonedEmbed.getAttribute('data-src'));\n                    }\n\n                    options.onClick(clonedEmbed);\n                }, false);\n\n                var overlayText = document.createElement('div');\n                overlayText.className = options.classes.text;\n                overlayText.style.color = options.overlayColor;\n                overlayText.innerHTML = options.overlayText;\n\n                overlay.appendChild(overlayText);\n\n                var overlayExcludes = overlay.querySelectorAll(options.excludeElements);\n                for (var u = 0; u < overlayExcludes.length; u++) {\n                    overlayExcludes[u].addEventListener('click', function(e) {\n                        e.stopPropagation();\n                    }, false);\n                }\n\n                wrapper.appendChild(clonedEmbed);\n                if (image) {\n                    wrapper.appendChild(image);\n                }\n                wrapper.appendChild(overlay);\n\n                embed.parentNode.replaceChild(wrapper, embed);\n\n                options.onInit(wrapper);\n            })();\n        }\n    },\n};\n\nexport default LazyEmbed;\n\n"]}